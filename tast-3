 AI-CHATBOT-WITH-NLP
Name:Raj Chaurasiya

Intern Id:CT04DZ1762

Domain Name:Python programming

Duration:4 weeks

Mentor Name:Neela Santosh

Description:

This project demonstrates a basic AI Chatbot built using Natural Language Processing (NLP) techniques in Python. The chatbot uses simple machine learning methods to understand and respond to user inputs based on predefined intents. It can be thought of as a rule-based chatbot with machine learning features that classify input text into categories (called "intents") and then generate responses accordingly.

Overview of the Chatbot
The chatbot is trained to understand four main types of conversations:
Greetings (e.g., "Hello", "Hi")
Farewells (e.g., "Bye", "See you later")
Gratitude (e.g., "Thanks", "Thank you")
Asking Identity (e.g., "Who are you?", "What is your name?")
Each intent has associated patterns samples of user inputs) and responses (possible bot replies). When a user sends a message, the chatbot matches it with the most likely intent and responds with one of the predefined replies randomly.

 Breakdown of the Code
Libraries Used:
nltk (Natural Language Toolkit): Used for text tokenization and lemmatization.
sklearn (Scikit-learn): Specifically, CountVectorizer for feature extraction and MultinomialNB for training a classifier.
Data Preparation:
The intents dictionary contains structured training data with tags, patterns, and responses.
Each pattern is tokenized into words and lemmatized (e.g., "running" â†’ "run") to standardize input.
This processed data is stored and then used to train the model.

Vectorization:
The user inputs are converted into numerical form using CountVectorizer. This step transforms words into vectors that can be processed by the machine learning model.
Each vector represents the frequency of words in a message.

Model Training:
A Naive Bayes classifier (MultinomialNB) is trained on the vectorized inputs and their corresponding intent labels.
This model is well-suited for text classification problems like spam detection and intent recognition.

Inference / Chat Loop:
A list of user messages (conversation) is defined to simulate interaction.
For each message, the chatbot tokenizes and lemmatizes the input, vectorizes it, and then uses the trained model to predict the intent.
Based on the predicted tag, it selects a response randomly from the corresponding list.


output:

<img width="490" height="351" alt="Image" src="https://github.com/user-attachments/assets/3ea3886e-5eba-4ff6-8193-e679d1ffc671" />
